#!/usr/bin/env ruby

require "bundler/inline"

gemfile(true) do
  source "https://rubygems.org"
  gem "debug"
  gem "async"
  gem "feedbag"
end

require "yaml"
require "debug"
require "async"
require "async/barrier"
require "async/semaphore"
require "feedbag"
require 'optparse'

# Parse CLI options
options = {
  # By default only unlocked blogs will be fetched, but we can force fetching all the blogs or only the ones without rss feed
  force: :unlocked,
  # By default we do not fetch any file
  categories: []
}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: myscript.rb [options] data_file1 data_file2 ..."

  opts.on("--force MODE", [:all, :norss, :unlocked], "Force mode (all, norss, unlocked) Default: unlocked") do |mode|
    options[:force] = mode
  end

  opts.on("-h", "--help", "Show this help") do
    puts opts
    exit
  end
end

# Parse options first
parser.order!(ARGV)

# Remaining arguments are categories
options[:categories] = ARGV
unless options[:categories].any?
  puts <<~OUTPUT

    Pass at least one data file to fetch.
    Check bin/fetch_rss --help for usage
  OUTPUT
  exit 1
end

def feedsearch(url)
  print "."
  site_host = URI(url).host
  # Reject feed urls that are captured but from another site than the url
  # provided and returns the first rss url found
  Feedbag.find(url).select do |feed_url|
    url.include? URI(feed_url).host
  end.first
end

def update_blog?(blog, mode: :unlocked)
  # we never update web archive blogs
  return false if blog['url'].include?('web.archive.org')

  case mode
  when :unlocked then !blog.fetch('locked', true)
  when :all      then true
  when :norss    then blog['rss'].nil?
  end
end

data = options[:categories].each.with_object({}) do |category, data|
  data[category] = YAML.load_file(category)
end

Async do |task|
  barrier = Async::Barrier.new
  semaphore = Async::Semaphore.new(10, parent: barrier) # limit the number of concurrent searches

  result = data.each.with_object({}) do |(category, blogs), new_data|
    puts "\nQuerying category: #{category}"
    new_data[category] = blogs.map do |blog|
      semaphore.async do
        rss_link = blog['rss']
        if update_blog?(blog, mode: options[:force])
          rss_link = feedsearch(blog['url'])
        end

        locked = blog['locked']
        if update_blog?(blog) && rss_link
          locked = true
        end

        blog.merge('rss' => rss_link, 'locked' => locked)
      end
    end
  end

  barrier.wait

  result.transform_values! do |values|
    values.map(&:result)
  end

  result.each do |category, blogs|
    File.open(category, "wb") { |f| f.write blogs.to_yaml }
  end
ensure
  barrier&.stop
end
